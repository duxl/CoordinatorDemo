<resources>
    <string name="app_name">CoordinatorDemo</string>
    <string name="lager_text">
CoordinatorLayout is a super-powered FrameLayout.
CoordinatorLayout is intended for two primary use cases:
As a top-level application decor or chrome layout
As a container for a specific interaction with one or more child views
By specifying Behaviors for child views of a CoordinatorLayout you can provide many different interactions within a single parent and those views can also interact with one another. View classes can specify a default behavior when used as a child of a CoordinatorLayout using the CoordinatorLayout.DefaultBehavior annotation.
Behaviors may be used to implement a variety of interactions and additional layout modifications ranging from sliding drawers and panels to swipe-dismissable elements and buttons that stick to other elements as they move and animate.
Children of a CoordinatorLayout may have an anchor. This view id must correspond to an arbitrary descendant of the CoordinatorLayout, but it may not be the anchored child itself or a descendant of the anchored child. This can be used to place floating views relative to other arbitrary content panes.
Children can specify CoordinatorLayout.LayoutParams.insetEdge to describe how the view insets the CoordinatorLayout. Any child views which are set to dodge the same inset edges by CoordinatorLayout.LayoutParams.dodgeInsetEdges will be moved appropriately so that the views do not overlap.
    </string>

    <string name="scroll_flags_describe">
        <![CDATA[
        <p>
        ScrollFlags共有五种常量值供AppBarLayout的Children View使用，在xml布局文件中通过app:layout_scrollFlags设置，对应的值为：scroll，enterAlways，enterAlwaysCollapsed，snap，exitUntilCollapsed；也可以在代码中通过setScrollFlags(int)方法使用，比如：<br/>
        AppBarLayout.LayoutParams params = (AppBarLayout.LayoutParams) toolbar.getLayoutParams();
        params.setScrollFlags(AppBarLayout.LayoutParams.SCROLL_FLAG_SCROLL | AppBarLayout.LayoutParams.SCROLL_FLAG_ENTER_ALWAYS);
        </p>

        <br/>
        <p>
        下面分析这五种值的使用
        </p>

        <p>
        <b>scroll</b><br/>
        Child View 伴随着滚动事件而滚出或滚进屏幕。注意两点：第一点，如果使用了其他值，必定要使用这个值才能起作用；第二点：如果在这个child View前面的任何其他Child View没有设置这个值，那么这个Child View的设置将失去作用
        </p>
        <br/>

        <p>
        <b>enterAlways</b><br/>
        快速返回模式。其实就是向下滚动时Scrolling View和Child View之间的滚动优先级问题。对比scroll和scroll | enterAlways设置，发生向下滚动事件时，前者优先滚动Scrolling View，后者优先滚动Child View，当优先滚动的一方已经全部滚进屏幕之后，另一方才开始滚动。
        </p>
        <br/>

        <p>
        <b>enterAlwaysCollapsed</b><br/>
        enterAlways的附加值。这里涉及到Child View的高度和最小高度，向下滚动时，Child View先向下滚动最小高度值，然后Scrolling View开始滚动，到达边界时，Child View再向下滚动，直至显示完全。
        </p>
        <br/>

        <p>
        <b>exitUntilCollapsed</b><br/>
        这里也涉及到最小高度。发生向上滚动事件时，Child View向上滚动退出直至最小高度，然后Scrolling View开始滚动。也就是，Child View不会完全退出屏幕。
        </p>
        <br/>

        <p>
        <b>snap</b><br/>
        简单理解，就是Child View滚动比例的一个吸附效果。也就是说，Child View不会存在局部显示的情况，滚动Child View的部分高度，当我们松开手指时，Child View要么向上全部滚出屏幕，要么向下全部滚进屏幕，有点类似ViewPager的左右滑动。
        </p>
        <br/>

        <a href="https://www.jianshu.com/p/7caa5f4f49bd">摘抄自：Android 详细分析AppBarLayout的五种ScrollFlags<br/> https://www.jianshu.com/p/7caa5f4f49bd</a>

        ]]>
    </string>

    <string name="collapsing_toolbar_describe">
        <![CDATA[
        <p>
        一些使用技巧：
        </p>

        <p>
            默认折叠后的高度是CollapsingToolbarLayout内子控件Toolbar的高度，如果子控件不包含Toolbar，而是自定义的标题，可以在CollapsingToolbarLayout设置app:toolbarId="@+id/custom_title_id"达到折叠后高度是自定义标题的高度。
            使用app:toolbarId自定义标题栏时，需要设置scrollFlags为"scroll|exitUntilCollapsed"才能保证标题栏不被滑动出屏幕，而且LinearLayout的weight权重将无效
        </p>

        <p>
            <br/>标题折叠后的样式<br/>
            app:collapsedTitleGravity="center|start"
            app:collapsedTitleTextAppearance="@style/mySmallStyle"
            app:collapsedTitleTextColor="@color/white"

            <br/>标题展开后的样式<br/>
            app:expandedTitleGravity="bottom|start"
            app:expandedTitleTextAppearance="@style/myBigStyle"
            app:expandedTitleTextColor="@color/white"

            app:layout_scrollFlags="scroll|exitUntilCollapsed"

            <br/>背景颜色<br/>
            android:background="@color/theme_bg"
            <br/>折叠后的背景颜色<br/>
            app:contentScrim="@color/theme_bg"


            <br/>标题折叠模式<br/>
            app:titleCollapseMode="scale"
        </p>

        ]]>
    </string>
</resources>
